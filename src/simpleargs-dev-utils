#!/usr/bin/env bash

[ -d "${SIMPLEARGS_PROJECT}" ] || { echo "No such directory: SIMPLEARGS_PROJECT='${SIMPLEARGS_PROJECT}'"; return 1; }
[ -f "${SIMPLEARGS_PROJECT}/src/simpleargs-main" ] && [ -f "${SIMPLEARGS_PROJECT}/docs/command-completion.md" ] ||
    { echo "Doesn't seem to be simpleargs project dir: '${SIMPLEARGS_PROJECT}'"; return 1; }

export SIMPLEARGS_TARGET=${SIMPLEARGS_PROJECT}/target
export SIMPLEARGS_BUNDLE=${SIMPLEARGS_TARGET}/simpleargs-bundle
export SIMPLEARGS_DOCS=${SIMPLEARGS_PROJECT}/docs
export SIMPLEARGS_DOC_SCRIPTS=${SIMPLEARGS_DOCS}/scripts
export SIMPLEARGS_DOC_RESOURCES=${SIMPLEARGS_DOCS}/resources

sa-clean() {
    rm -rf "${SIMPLEARGS_TARGET}"
}

sa-clean-cache() {
    rm ~/.simpleargs.d/cached/*
}

sa-run-test-bundle() {
    local start_seconds=${SECONDS}
    [ -f "${SIMPLEARGS_BUNDLE}" ] || { echo "No such file: '${SIMPLEARGS_BUNDLE}'"; return 1; }
    cd ${SIMPLEARGS_PROJECT}/test
    export SA_TEST_RESOURCES="${SIMPLEARGS_PROJECT}/test/resources"
    clear
    if [ "${sa_code_coverage}" = "true" ]
    then
        sed -i '/#----- simpleargs-install-utils -----#/,$ d' ${SIMPLEARGS_BUNDLE}
        # Run the tests using code coverage tool. Highlight the overall test result and code coverage percentage.
        bashcov --root "${SIMPLEARGS_TARGET}" -- ../bin/test-runner "$@" 2>&1 | grep --line-buffered -v "bashcov: warning" | \grep --color=auto -E -e "[0-9]+\.[0-9]+%|SUCCESSFULLY|FAILURES|$"
        sa-colorize-coverage
        previous_missed_code_line=-10000
        while read missed_code_line
        do
            if [ $(( missed_code_line - previous_missed_code_line )) -gt 20 ]
            then
                [ ${previous_missed_code_line} -lt 0 ] && { echo; echo -n "# Missed code lines:"; }
                echo -n " ${missed_code_line}"
            fi
            previous_missed_code_line=${missed_code_line}
        done < <(sed -nr '/class="missed"/ s/.* data-linenumber="([0-9]+)">/\1/p' ${SIMPLEARGS_TARGET}/coverage/index.html)
        # TODO: strip off simpleargs-completion-runtime from the code coverage (sed ranges will probably do the job:
        # /<h3>simpleargs-bundle</h3>/,/<h3>/
        echo
    else
        ../bin/test-runner "$@" 2>&1 | grep --line-buffered -v "bashcov: warning" | \grep --color=auto -E -e "[0-9]+\.[0-9]+%|SUCCESSFULLY|FAILURES|$"
        echo "To produce code coverage report use 'sa_code_coverage=true'"
    fi
    echo "Test execution took $(( SECONDS - start_seconds )) seconds"
}

sa-colorize-coverage() {
    # Make missed code lines more visible in code coverage report
    coverage_css=${SIMPLEARGS_TARGET}/coverage/assets/0.10.2/application.css
    if [ -f "${coverage_css}" ]
    then
        echo "Modifying '${coverage_css}'"
        sed -ri -e 's/background-color: #f7c0c0;/background-color: #3d348c;/' \
                -e 's/background-color: #f7cfcf;/background-color: #3d348c;/' \
                "${coverage_css}"
    else
        echo "No such file: '${coverage_css}'"
        return 1
    fi
}

sa-emacs-failed-test() {
    # The point of test failure (file and line number)
    # are stored by 'errortrap' in simpleargs-test-utils.
    local script=$(cat /tmp/simpleargs-test-runner/sa-failed-test-file)
    local script_file="${SIMPLEARGS_PROJECT}/test/${script}"
    local lineno=$(cat /tmp/simpleargs-test-runner/sa-failed-test-lineno)
    [ "${lineno}" -eq "${lineno}" ] || { echo "Invalid line number: '${lineno}'"; return 1; }
    [ -f "${script_file}" ] || { echo "No such test file: '${script_file}'"; return 1; }
    emacs "+${lineno}" "${script_file}"
}

sa-emacs-simpleargs-line() {
    local global_line="$1"
    local global_file="${SIMPLEARGS}"
    local global_file_lines=$(wc -l "${global_file}" | cut -d" " -f1)

    [ -n "${global_line}" ] || { echo "Usage: $FUNCNAME <line number>" >&2; return 1; }
    [ "${global_line}" -ge 1 ] && [ "${global_line}" -le "${global_file_lines}" ] ||
        { echo "ERROR: Line ${global_line} out of range (1-${global_file_lines})" >&2; return 1; }

    local source_file=$(sed -n -e "1,${global_line}p" ${global_file} | grep -e '^#----- .* -----#$' | tail -1 | sed -r 's/#----- ([^ ]+) -----#$/\1/')
    [ -n "${source_file}" ] || { echo "Could not deduce source file" >&2; return 1; }
    local file_header_line=$(grep -n "^#----- ${source_file} -----#$" ${global_file} | cut -d: -f1)
    (( source_line = global_line - file_header_line ))

    print_variables global_file global_line global_file_lines source_file file_header_line source_line
    emacs +${source_line} ${SIMPLEARGS_PROJECT}/src/${source_file}
}

sa-run-completion-test-bundle() {
    [ -f "${SIMPLEARGS_BUNDLE}" ] || { echo "No such file: '${SIMPLEARGS_BUNDLE}'"; return 1; }
    . ${SIMPLEARGS_PROJECT}/src/simpleargs-completion-test-utils
    cd ${SIMPLEARGS_PROJECT}/test/completion
    export SA_TEST_RESOURCES="${SIMPLEARGS_PROJECT}/test/resources"
    clear
    ${SIMPLEARGS_PROJECT}/bin/completion-test-runner "$@"
}

sa-diff-terminal-contents() {
    kdiff3 /tmp/simpleargs/sa-terminal-expected-contents /tmp/simpleargs/sa-terminal-actual-contents
}

sa-add-code-coverage-markers() {
    local file="$1"
    sed -n "/#SA_COV/ =" "${file}" | sed -E 's|(.*)|\1s/#SA_COV/_sa_record_coverage \1/|' | sed -i -f - "${file}"
}

sa-remove-code-coverage-markers() {
    local file="$1"
    sed -i -E 's/_sa_record_coverage [0-9]+/#SA_COV/' "${file}"
}

sa-reset-code-coverage() {
    local i
    local count=0
    mkdir -p "${SA_COMPLETION_COVERAGE_DIR}" || return 1
    ls "${SA_COMPLETION_COVERAGE_DIR}"/* >/dev/null 2>&1 && rm "${SA_COMPLETION_COVERAGE_DIR}"/*
    for i in $(grep -E "_sa_record_coverage [0-9]+" ~/.simpleargs.d/simpleargs-completion | sed -E 's/ *_sa_record_coverage ([0-9]+)/\1/')
    do
        ((count++))
        touch "${SA_COMPLETION_COVERAGE_DIR}/$(printf %04d "${i}")"
    done
    echo "Reset ${count} code coverage points"
}

sa-clear-cache() {
    local script
    for script in "$@"
    do
        [ -f "${SIMPLEARGS_DIR}"/cached/"${script}" ] &&
            rm "${SIMPLEARGS_DIR}"/cached/"${script}"
    done
}

sa-gen-cache() {
    local script
    for script in "$@"
    do
        sa_parse_only=true ${script} >/dev/null 2>&1
    done
}

sa-reset-cache() {
    sa-clear-cache "$@"
    sa-gen-cache "$@"
}

# This function is meant to be run in a terminal that is used for showing
# the output from the command completion routines. This makes the debugging
# easier since the output is quite verbose and would garble the terminal
# where the command completion is tested i.e. the user is typing in commands
# and hitting tab to get the auto completions.
sa-tty-to-tmp() {
    mkdir -p /tmp/simpleargs
    echo "_sa_completion_tty=$(tty)" > /tmp/simpleargs/sa-completion-tty
    echo "Set completion tty: $(tty)"
    echo "In the test terminal you can use"
    echo "# FINEST=10 FINER=20 FINE=30 CONFIG=40 INFO=50 WARN=60 ERROR=70"
    echo "> _sa_ttyecho_level=20"
    echo "> _sa_completion_benchmark=true # true or false"
    echo "> _sa_echo_overall_benchmark=true # true or false"
    trap "echo -n 'Removing completion tty file...'; rm -f /tmp/simpleargs/sa-completion-tty; echo 'removed'; sleep 0.5;" EXIT
}

# If the completion tty file exists source it to set the target tty for
# the debug output of command completion routines.
if [ -f /tmp/simpleargs/sa-completion-tty ]
then
    . /tmp/simpleargs/sa-completion-tty
    #echo "Simpleargs completion tty: ${_sa_completion_tty}"
    # FINEST=10 FINER=20 FINE=30 CONFIG=40 INFO=50 WARN=60 ERROR=70
    _sa_ttyecho_level=30
    _sa_completion_benchmark=false
    _sa_echo_overall_benchmark=false
fi
